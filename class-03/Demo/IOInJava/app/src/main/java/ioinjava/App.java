/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ioinjava;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Scanner;

public class App {

    static BufferedReader readerForTryCatch;
    public static void main(String[] args) throws IOException {

        //set up the path
        Path filePath = Path.of("D:/Gradle projects/IOInJava/app/src/main/resources", "alice_in_wonderland.txt");

        // deference between absolutePath and relativePath
        Path absolutePath = Path.of("C:/Users/t.hussein/amman-java-401d7/class-02/anynotpad.txt");
        Path relativePath = Path.of("resources/alice_in_wonderland.txt");

        //how to build dynamic paths and how to bind paths (see resolve() method
        Path basePath = Path.of("C:/Users/t.hussein/amman-java-401d7/class-02");
        Path filePathVersion2 = basePath.resolve("resources/alice_in_wonderland.txt");

        //=============read from file with scanner (first way)=============
        Scanner read = new Scanner(filePath);

        //this will read just one word
//        String wordOne = read.next();
//        System.out.println("Word From the tct file:  "+ wordOne);
//        read.close();

        System.out.println("==============starting print the whole file==============");
        while (read.hasNextLine()){
            String wordTwo = read.next();
        System.out.println("Word From the tct file:  "+ wordTwo);
        }
        read.close();
        System.out.println("==============ending print the whole file==============");

        //=============read from file with Files interface (second way)=============
        List<String> lines= Files.readAllLines(filePath);
        for(String line: lines){
            System.out.println("Line:  "+ line);
        }

        //=============read from file with BufferedReader (third way)=============
        /* the Buffered is the slow Cuz it takes chunk of data then put them in the memory
         * then do the operation but also this is good Cuz it will reduce the number of the IO operation
         */

        BufferedReader lineReader = Files.newBufferedReader(filePath);
        String readLine = lineReader.readLine();
        System.out.println("The reading using Buffered: "+ readLine);
        lineReader.close();


        //=============catch the errors with try and catch=============

        //old one
        try{
            readerForTryCatch = Files.newBufferedReader(filePath);
            String theLine = readerForTryCatch.readLine();
            while (theLine != null){
                theLine= readerForTryCatch.readLine();
            }
        }catch (IOException ioe){
            System.out.println("Error reading file: "+ioe.getMessage());
            ioe.printStackTrace();
        }finally {
            readerForTryCatch.close();
        }

        //=============catch the error with try and resource this is the best way Cuz it will close and resource automatically =============
        //new one
        try(BufferedReader readerForTryWithResource= Files.newBufferedReader(filePath)){
            String theLine = readerForTryWithResource.readLine();
            while (theLine != null){
                theLine= readerForTryWithResource.readLine();
            }
        }catch (IOException ioe){
            System.out.println("Error reading file: "+ioe.getMessage());
            ioe.printStackTrace();
        }

    }
}
