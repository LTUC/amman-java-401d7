/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package httprequsetandresponseinjava;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class App {


    public static void main(String[] args) {

        fetchAndSerializePokemonData();

    }

    public static void fetchAndSerializePokemonData() {
        URL pokeUrl=null;
        try{
            // 1. Make a URL to talk to a website
             pokeUrl = new URL("https://pokeapi.co/api/v2/pokemon/ditto");

            // 2. Make a connection to the website
            HttpURLConnection pokeUrlConnection = (HttpURLConnection) pokeUrl.openConnection();
            // 3. Specify a method for our connection
            pokeUrlConnection.setRequestMethod("GET");
            // 4. Need to read from this connection
            InputStreamReader reader= new InputStreamReader(pokeUrlConnection.getInputStream());
            BufferedReader pokeBufferReader = new BufferedReader(reader);
            String pokeData = pokeBufferReader.readLine();
            System.out.println(pokeData);

            // 5. Need convert format to objects
            // 5 1/2. Make objects for the data to live in
            /*
             * GsonBuilder: This is a class provided by the Gson library that helps configure how Gson will handle JSON serialization and deserialization.

             * setPrettyPrinting(): This method configures the GsonBuilder to generate JSON output with proper indentation and line breaks, making the JSON representation more human-readable.

             * create(): This method is used to create a Gson object based on the settings defined using the GsonBuilder. The Gson object is the main entry point for using the Gson library's functionalities.
             *
             */
            Gson gson=new GsonBuilder().setPrettyPrinting().create();
            Pokemon ditto= gson.fromJson(pokeData, Pokemon.class);

            // 6. Write file out to disk
            File dittoFile = new File("D:\\Gradle projects\\HTTPRequsetAndResponseInJava\\app\\src\\main\\resources\\ditto.json");

            try (FileWriter writeToDittoFile= new FileWriter(dittoFile)){
                gson.toJson(ditto, writeToDittoFile);
            }
        }catch (IOException e){
            System.out.println("invalid URl: "+pokeUrl);
            e.printStackTrace();
        }
    }
}
